#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<dos.h>
int AI=0,HUMAN=1;

void draw()
 {
  printf("IT IS A DRAW -_-");
  getch();
  exit(0);
 }
 void win()
 {
  printf("I WIN...YOU LOSE..BOOHOO");
  getch();
  exit(0);
  }
void display(char *a)
{
 int i,j,n=0;
 printf("\n");
 for(i=0;i<3;i++)
  {
  for(j=0;j<3;j++)
  {
   printf("\t%c",*(a+n));
   n++;
   }
   printf("\n");
   }
 }
char* user_start(char *table,int choice)
  {
    *(table+choice)='X';
    display(table);
    return table;
    }
char* AI_start(char *table)
{
  printf("OK,I will go First");
  *(table+4)='O';
  display(table);
  return table;
  }
char* onexone(int choice,char* table)
{
 if(choice==1)
 *(table+0)='X';
 else
 *(table+0)='O';
 display(table);
 return table;

 }
char* onextwo(int choice,char* table)
{
 if(choice==1)
  *(table+1)='X';
 else
 *(table+1)='O';
 display(table);
 return table;
 }
 char* onexthree(int choice,char* table)
{
 if(choice==1)
 *(table+2)='X';
 else
 *(table+2)='O';
 display(table);
 return table;
 }

 char* twoxone(int choice,char* table)
{
 if(choice==1)
  *(table+3)='X';
 else
 *(table+3)='O';
 display(table);
 return table;
 }

 char* twoxtwo(int choice,char* table)
{
 if(choice==1)
 *(table+4)='X';
 else
 *(table+4)='O';
 display(table);
 return table ;
 }

 char* twoxthree(int choice,char* table)
{
 if(choice==1)
 *(table+5)='X';
 else
 *(table+5)='O';
 display(table);
 return table;
 }

 char* threexone(int choice,char* table)
{
 if(choice==1)
 *(table+6)='X';
 else
 *(table+6)='O';
 display(table);
 return table;
 }

 char* threextwo(int choice,char* table)
{
 if(choice==1)
 *(table+7)='X';
 else
 *(table+7)='O';
 display(table);
 return table;
 }

 char* threexthree(int choice,char* table)
{
 if(choice==1)
 *(table+8)='X';
 else
 *(table+8)='O';
 display(table);
 return table;
 }
void EXAMPLE_INPUT()
{
 int i,j,n=1;
 printf("\n");
 for(i=0;i<3;i++)
  {
  for(j=0;j<3;j++)
  {
   printf("\t%d",n);
   n++;
   }
   printf("\n");
   }
 }
 void my_turn()
 {
  printf("\nMy turn:");
  }
 void your_turn()
 {
  printf("\nYour turn:");
  }
void tease()
 {
  int n;
  randomize();
  n=random(15);
  switch(n)
  {
  case 0:printf("\nSeriously...? That move...!!\n");
	 break;
  case 1:printf("\nYou are a waste of space\n");
	break;
  case 2:printf("\nYour stupidity makes me lose hope on Human species\n");
	break;
  case 3:printf("\nWHAT THE HELL WAS THAT\n");
	break;
  case 4:printf("\nEven Mr.Bean is smarter than you\n");
	break;
  case 5:printf("\nAre you even trying...\n");
	break;
  case 6:printf("\nThere is a tree working so hard to make oxygen so that you can breath....and YOU make this move\n");
	break;
  case 7:printf("\nFind the nearest wall...smash your head over it as hard as you can\n");
	break;
  case 8:printf("\nYour stupidity makes me want to turn myself off\n");
	break;
  case 9:printf("\nEver heard of the word 'NOOB' ... google it...thats you\n");
	break;
  case 10:printf("\nUghhh...ITS BORING\n");
	break;
  case 11:printf("\nI was never told I have to play against a chimp\n");
	break;
  case 12:printf("\nEver had a head injury ...? Would explain your stupidity...?\n");
	break;
  case 13:printf("\nWish you go see the south pole and never return...That way I don't have to play against such stupid moves\n");
	break;
  case 14:printf("\nPlease delete me..Please...So that I never have to play with you ever again\n");
	break;
  }
 delay(1000);
  }

int get_input(char* table)
 {
   int CHOICE;
   your_turn();
   scanf("\n %d",&CHOICE);
   if(CHOICE==1)
   onexone(HUMAN,table);
   if(CHOICE==2)
   onextwo(HUMAN,table);
   if(CHOICE==3)
   onexthree(HUMAN,table);
   if(CHOICE==4)
   twoxone(HUMAN,table);
   if(CHOICE==5)
   twoxtwo(HUMAN,table);
   if(CHOICE==6)
   twoxthree(HUMAN,table);
   if(CHOICE==7)
   threexone(HUMAN,table);
   if(CHOICE==8)
   threextwo(HUMAN,table);
   if(CHOICE==9)
   threexthree(HUMAN,table);
   tease();
   return CHOICE-1;
   }
  int get_input1(char* table)
 {
   int CHOICE;
   your_turn();
   scanf("\n %d",&CHOICE);
   if(CHOICE==1)
   onexone(HUMAN,table);
   if(CHOICE==2)
   onextwo(HUMAN,table);
   if(CHOICE==3)
   onexthree(HUMAN,table);
   if(CHOICE==4)
   twoxone(HUMAN,table);
   if(CHOICE==5)
   twoxtwo(HUMAN,table);
   if(CHOICE==6)
   twoxthree(HUMAN,table);
   if(CHOICE==7)
   threexone(HUMAN,table);
   if(CHOICE==8)
   threextwo(HUMAN,table);
   if(CHOICE==9)
   threexthree(HUMAN,table);
   return CHOICE-1;
   }
 void FIRST_ITERATION(char* table)
 {
    int CHOICE;
    CHOICE=get_input(table);
    if(CHOICE==0)
    {
     threexone(AI,table);
     CHOICE=get_input(table);
	if(CHOICE!=2)
	 {
	    onexthree(AI,table);
	    printf("I WIN");
	    getch();
	    exit(0);
	 }
	else
	 {
	   onextwo(AI,table);
	   CHOICE=get_input(table);
	   if(CHOICE!=7)
	    {
	      threextwo(AI,table);
	       printf("I WIN");
	       getch();
	       exit(0);
	    }
	    else
	    {
	      twoxone(AI,table);
	      CHOICE=get_input(table);
	      if(CHOICE!= 5)
	      {
		twoxthree(AI,table);
		 printf("I WIN");
		 getch();
		exit(0);
	      }
	      else
	      {
		threexthree(AI,table);
		printf("It is a draw");
		getch();
		exit(0);
	      }
	    }
	 }
       }
     //end of first coloum
      if(CHOICE==1)
	{
	   threexthree(AI,table);
	   CHOICE=get_input(table);
	   if(CHOICE!=0)
	   {
	    onexone(AI,table);
	     printf("I WIN");
	    getch();
	    exit(0);
	    }
	   else
	   {
	     onexthree(AI,table);
	     CHOICE=get_input(table);
	     if(CHOICE==5)
	      {
		threexone(AI,table);
		 printf("I WIN");
		 getch();
		exit(0);
	      }
	    else if(CHOICE==6)
	    {
	       twoxthree(AI,table);
		printf("I WIN");
	    getch();
	    exit(0);
	     }
	    else
	     {
	       threexone(AI,table);
		printf("I WIN");
		getch();
		exit(0);
	     }
	   }
	 }
     //end of 2nd column

      if(CHOICE==2)
	{
	  threexthree(AI,table);
	  CHOICE=get_input(table);
	  if(CHOICE!=0)
	   {
	     onexone(AI,table);
	      printf("I WIN");
	      getch();
	      exit(0);
	   }
	   else
	     {
	       onextwo(AI,table);
	       CHOICE=get_input(table);
	       if(CHOICE!=7)
	       {
		 threextwo(AI,table);
		  printf("I WIN");
		  getch();
		  exit(0);
	       }
	       else
	       {
	       twoxone(AI,table);
	       CHOICE=get_input(table);
	       if(CHOICE==5)
		{
		 printf("It is a draw");
		 getch();
		 exit(0);
		 }
	       else
	       {
		 twoxthree(AI,table);
		  printf("I WIN");
		  getch();
		 exit(0);
	       }
	     }
	   }
	 }
     //end of third column

     //start of 2nd round RIGHT IS KEPT AS TOP
     if(CHOICE==3)
     {
       onexthree(AI,table);
       CHOICE=get_input(table);
       if(CHOICE!=6)
	{
	  threexone(AI,table);
	   printf("I WIN");
	   getch();
	   exit(0);
	}
       else
	{
	  onexthree(AI,table);
	  CHOICE=get_input(table);
	  if(CHOICE==1)
	   {
	    threexthree(AI,table);
	    printf("I WIN");
	    getch();
	    exit(0);
	    }
	  else if(CHOICE==8)
	   {
	     onextwo(AI,table);
	      printf("I WIN");
	    getch();
	    exit(0);
	    }
	  else
	    {
	     onextwo(AI,table);
	      printf("I WIN");
	    getch();
	    exit(0);
	    }
	  }
	} //End of choice 3
   if(CHOICE==5)
    {
      threexone(AI,table);
      CHOICE=get_input(table);
       if(CHOICE!=2)
	{
	  onexthree(AI,table);
	   printf("I WIN");
	    getch();
	    exit(0);
	}
       else
       {
	 threexthree(AI,table);
	 if(CHOICE==7)
	  {
	    onexone(AI,table);
	     printf("I WIN");
	    getch();
	    exit(0);
	   }
	 else
	  {
	    threextwo(AI,table);
	     printf("I WIN");
	    getch();
	    exit(0);
	  }
	}
      } //end of choice 5 left as top
    if(CHOICE==6)
      {
	onexone(AI,table);
	CHOICE=get_input(table);
	 if(CHOICE!=8)
	  {
	    threexthree(AI,table);
	     printf("I WIN");
	    getch();
	    exit(0);
	    }
	 else
	 {
	   threextwo(AI,table);
	   CHOICE=get_input(table);
	     if(CHOICE!=1)
	     {
	      onextwo(AI,table);
	      printf("I WIN");
	      getch();
	      exit(0);
	      }
	     else
	     {
	       twoxthree(AI,table);
	       CHOICE=get_input(table);
	       if(CHOICE==3)
		{
		   onexthree(AI,table);
		   printf("It is a draw");
		   getch();
		   exit(0);
		}
	       else
		{
		  twoxone(AI,table);
		   printf("I WIN");
		   getch();
		   exit(0);
		}
	      }
	    }
	  }//end of choice 6 bottom as top

    if(CHOICE==7)
      {
	onexone(AI,table);
	CHOICE=get_input(table);
	if(CHOICE!=8)
	 {
	   threexthree(AI,table);
	    printf("I WIN");
	    getch();
	    exit(0);
	 }
	else
	{
	  threexone(AI,table);
	  CHOICE=get_input(table);
	  if(CHOICE==3)
	  {
	    onexthree(AI,table);
	     printf("I WIN");
	     getch();
	     exit(0);
	  }
	  else
	  {
	   twoxone(AI,table);
	    printf("I WIN");
	    getch();
	    exit(0);
	   }
	 }
       }

   if(CHOICE==8)
    {
      onexthree(AI,table);
      CHOICE=get_input(table);
      if(CHOICE!=6)
       {
	 threexone(AI,table);
	  printf("I WIN");
	 getch();
	  exit(0);
	}
      else
      {
	threextwo(AI,table);
	CHOICE=get_input(table);
	if(CHOICE!=1)
	 {
	   onextwo(AI,table);
	    printf("I WIN");
	    getch();
	    exit(0);
	 }
	else
	{
	  twoxthree(AI,table);
	  CHOICE=get_input(table);
	  if(CHOICE==3)
	  {
	   onexone(AI,table);
	    printf("It is a draw");
	    getch();
	    exit(0);
	  }
	 else
	  {
	    twoxone(AI,table);
	     printf("I WIN");
	    getch();
	    exit(0);
	  }
	}
      }
    }
   }

void second_iteration(char* table)
  {
    int CHOICE;
    onexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
    {
      threextwo(AI,table);
      CHOICE=get_input(table);
      if(CHOICE==2)
      {
       threexone(AI,table);
       CHOICE=get_input(table);
       if(CHOICE==3)
       {
	 threexthree(AI,table);
	 printf("I WIN");
       }
       else
       {
	twoxone(AI,table);
	printf("I WIN");
       }
      }
      if(CHOICE==3)
      {
	twoxthree(AI,table);
	CHOICE=get_input(table);
	if(CHOICE==2)
	{
	 threexone(AI,table);
	 printf("It is a draw");
	}
	if(CHOICE==6)
	{
	 onexthree(AI,table);
	 printf("It is a draw");
	}
	if(CHOICE==8)
	{
	 onexthree(AI,table);
	 printf("It is a draw");
	}
      }
      if(CHOICE==5)
      {
       twoxone(AI,table);
       CHOICE=get_input(table);
       if(CHOICE==2||CHOICE==8)
	{
	  threexone(AI,table);
	  printf("It is a win");
	}
       if(CHOICE==6)
       {
	 onexthree(AI,table);
	 printf("It is a draw");
       }
      }
      if(CHOICE==6)
      {
       onexthree(AI,table);
       CHOICE=get_input(table);
       if(CHOICE==3)
       {
	twoxthree(AI,table);
	draw();
       }
       else
       {
	twoxone(AI,table);
	draw();
       }
      }
    if(CHOICE==8)
     {
       twoxone(AI,table);
       CHOICE=get_input(table);
       if(CHOICE==6)
       {
	onexthree(AI,table);
	draw();
       }
       else
       {
	threexone(AI,table);
	win();
       }
     }
    }
  if(CHOICE==2)
   {
    threexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1||CHOICE==5||CHOICE==7||CHOICE==8)
     {
      twoxone(AI,table);
      win();
     }
    if(CHOICE==3)
     {
      twoxthree(AI,table);
      CHOICE=get_input(table);
      if(CHOICE==1||CHOICE==8)
       {
	threextwo(AI,table);
	draw();
       }
      else
      {
       onextwo(AI,table);
       draw();
      }
     }
   }
  if(CHOICE==3)
  {
   twoxthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    threextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==2)
    {
     threexone(AI,table);
     draw();
    }
    else
    {
     onexthree(AI,table);
     draw();
    }
   }
   if(CHOICE==2)
   {
    threexone(AI,table);
    draw();
   }
   if(CHOICE==6)
   {
     onexthree(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==8)
     {
      threextwo(AI,table);
      draw();
     }
     else
     {
      threexthree(AI,table);
      win();
     }
   }
   if(CHOICE==7)
   {
    onextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==2)
    {
     onexthree(AI,table);
     draw();
    }
    else
    {
     threexone(AI,table);
     win();
    }
   }
  if(CHOICE==8)
  {
   onexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    threextwo(AI,table);
    draw();
   }
   else
   {
    onextwo(AI,table);
    win();
   }
  }
}
 if(CHOICE==5)
 {
  twoxone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
    {
     threextwo(AI,table);
     draw();
     }
    else
    {
     onextwo(AI,table);
     win();
    }
   }
  else
  {
   threexone(AI,table);
   win();
  }
 }
 if(CHOICE==6)
  {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
    {
     threextwo(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==3)
     {
      twoxthree(AI,table);
      draw();
     }
     else
     {
      twoxone(AI,table);
      draw();
     }
    }
    else
    {
     onextwo(AI,table);
     win();
    }
  }
  if(CHOICE==7)
  {
   onextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    threexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     twoxthree(AI,table);
     draw();
    }
    else
    {
     twoxone(AI,table);
     win();
    }
   }
  else
  {
   onexthree(AI,table);
   win();
  }
 }
 if(CHOICE==8)
 {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==3)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
     {
      threextwo(AI,table);
      draw();
     }
    if(CHOICE==2||CHOICE==7)
     {
      onextwo(AI,table);
      draw();
     }
    }
   else
   {
    twoxone(AI,table);
    win();
   }
  }
 }
void third_iteration(char* table,int CHOICE)
 {
  if(CHOICE==1) //top as top
  {
   twoxtwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)//first branch
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==6)
    {
      twoxone(AI,table);
      CHOICE=get_input(table);
      if(CHOICE==5)
      {
       threextwo(AI,table);
       draw();
      }
      else
      {
       twoxthree(AI,table);
       win();
      }
    }
    else
    {
     threexone(AI,table);
     win();
    }
   }
   if(CHOICE==2)//second branch
   {
    onexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==8)
    {
     twoxthree(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==3)
     {
      threexone(AI,table);
      draw();
     }
    else
    {
     twoxone(AI,table);
     win();
    }
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  if(CHOICE==3) //third branch
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==6)
    {
     threextwo(AI,table);
     draw();
    }
    else
    {
     threexone(AI,table);
     win();
    }
   }
  else
  {
   threexthree(AI,table);
   win();
   }
  }
 if(CHOICE==5)         //4th branch
  {
   onexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==6)
   {
    threexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==0)
    {
     twoxone(AI,table);
     draw();
    }
    else
    {
     onexone(AI,table);
     win();
    }
   }
   else
   {
    threexone(AI,table);
    win();
   }
  }
 if(CHOICE==6)      //5th branch
 {
  onexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==8)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    twoxthree(AI,table);
    draw();
   }
  if(CHOICE==3||CHOICE==5)
  {
   onexthree(AI,table);
   draw();
  }
  }
 else
 {
  threexthree(AI,table);
  win();
 }
}
if(CHOICE==7)      //6th branch
 {
  onexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
   threexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==5)
   {
    twoxone(AI,table);
    draw();
   }
   else
   {
    twoxthree(AI,table);
    win();
   }
  }
 else
 {
  threexone(AI,table);
  win();
 }
}
if(CHOICE==8)  //7th and final branch
 {
  onexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    twoxone(AI,table);
    draw();
   }
  if(CHOICE==3||CHOICE==5)
  {
   onexone(AI,table);
   draw();
  }
 }
 else
 {
  threexone(AI,table);
  win();
 }
}
}

if(CHOICE==3)//right as top
 {
  twoxtwo(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)//first branch
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    threextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
    {
     twoxthree(AI,table);
     draw();
    }
    else
    {
     onextwo(AI,table);
     win();
    }
   }
   else
   {
    threexthree(AI,table);
    win();
   }
 }
if(CHOICE==0)
 {
  threexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==2)
  {
   onextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==7)
   {
    twoxthree(AI,table);
    draw();
   }
   else
   {
    threextwo(AI,table);
    win();
   }
  }
 else
 {
  onexthree(AI,table);
  win();
 }
}
if(CHOICE==7)                //3rd branch
 {
  threexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==2)
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    twoxthree(AI,table);
    draw();
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  else
  {
  onexthree(AI,table);
  win();
  }
 }
if(CHOICE==1)     //4th branch
 {
  onexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==8)
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==6)
    {
     threextwo(AI,table);
     draw();
    }
    else
    {
     threexone(AI,table);
     win();
    }
   }
  else
  {
   threexthree(AI,table);
   win();
  }
 }
if(CHOICE==8) //5th branch
{
 threexone(AI,table);
 CHOICE=get_input(table);
 if(CHOICE==2)
 {
   twoxthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    onextwo(AI,table);
    draw();
   }
  if(CHOICE==7||CHOICE==1)
  {
   onexone(AI,table);
   draw();
  }
 }
 else
 {
  onexthree(AI,table);
  win();
  }
}
if(CHOICE==5)//6th branch
 {
  onexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==8)
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
    {
     threexone(AI,table);
     draw();
    }
    else
    {
     onextwo(AI,table);
     win();
    }
   }
  else
  {
   threexthree(AI,table);
   win();
  }
 }
if(CHOICE==2)//7th branch
{
 onexone(AI,table);
 CHOICE=get_input(table);
 if(CHOICE==8)
 {
  twoxthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
   threextwo(AI,table);
   draw();
   }
  if(CHOICE==7)
  {
    threexone(AI,table);
    draw();
  }
  else
  {
   threexone(AI,table);
   draw();
  }
 }
 else
 {
 threexthree(AI,table);
 win();
 }
}
}
if(CHOICE==5)//left as top
 {
  twoxtwo(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==2)  //1st branch
  {
   threexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    onextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==7)
    {
     twoxone(AI,table);
     draw();
    }
   else
   {
    threextwo(AI,table);
    win();
   }
  }
  else
  {
   onexone(AI,table);
   win();
  }
 }
 if(CHOICE==8)//2nd branch
 {
  onexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    onexone(AI,table);
    draw();
   }
   else
   {
    onextwo(AI,table);
    win();
   }
  }
 else
 {
  threexone(AI,table);
  win();
  }
 }
if(CHOICE==1) //3rd branch
 {
  onexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
    threexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==0)
    {
     twoxone(AI,table);
     draw();
    }
    else
    {
     onexone(AI,table);
     win();
    }
  }
  else
  {
   threexone(AI,table);
   win();
  }
 }
 if(CHOICE==7)      //4th branch
 {
  threexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==0)
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    onextwo(AI,table);
    draw();
   }
   else
   {
    onexthree(AI,table);
    win();
   }
  }
  else
  {
   onexone(AI,table);
   win();
  }
 }
if(CHOICE==0)     //5th branch
 {
  onexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
   twoxone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    threextwo(AI,table);
    draw();
   }
   if(CHOICE==1||CHOICE==7)
   {
    threexthree(AI,table);
    draw();
   }
  }
 else
 {
  threexone(AI,table);
  win();
  }
}
if(CHOICE==3) //6th branch
 {
  threexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==0)
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    onextwo(AI,table);
    draw();
   }
   else
   {
    onexthree(AI,table);
    win();
   }
  }
  else
  {
   onexone(AI,table);
   win();
  }
 }
if(CHOICE==6) //7th branch
 {
  threexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==0)
  {
   twoxone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    onextwo(AI,table);
    draw();
   }
   if(CHOICE==1||CHOICE==7)
   {
    onexthree(AI,table);
    draw();
   }
  }
  else
  {
   onexone(AI,table);
   win();
  }
 }
}
if(CHOICE==7)//Bottom as top
 {
  twoxtwo(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==8)//first branch
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     onextwo(AI,table);
     draw();
    }
    else
    {
     twoxone(AI,table);
     win();
    }
   }
   else
   {
    onexthree(AI,table);
    win();
   }
  }
 if(CHOICE==6)//2nd branch
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    twoxone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==5)
    {
     onextwo(AI,table);
     draw();
    }
    else
    {
     twoxthree(AI,table);
     win();
    }
   }
   else
   {
    onexone(AI,table);
    win();
   }
  }
 if(CHOICE==5)         //third branch
 {
  threexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==0)
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    onextwo(AI,table);
    draw();
   }
   else
   {
    onexthree(AI,table);
    win();
   }
  }
 else
  {
   onexone(AI,table);
   win();
  }
 }
 if(CHOICE==3)    //4th branch
 {
  threexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==2)
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    twoxthree(AI,table);
    draw();
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  else
  {
   onexthree(AI,table);
   win();
  }
 }
 if(CHOICE==2)     //5th branch
 {
  threexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==0)
  {
   onextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==6)
   {
    twoxone(AI,table);
    draw();
   }
   if(CHOICE==5||CHOICE==3)
   {
    threexone(AI,table);
    draw();
   }
  }
  else
  {
   onexone(AI,table);
   win();
  }
 }
 if(CHOICE==1) //6th branch
 {
  threexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==2)
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==3)
   {
    twoxthree(AI,table);
    draw();
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  else
  {
   onexthree(AI,table);
   win();
  }
 }
 if(CHOICE==0)   //7th branch
 {
  threexone(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==2)
  {
   onextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    twoxthree(AI,table);
    draw();
   }
   if(CHOICE==5)
   {
    threexthree(AI,table);
    draw();
   }
   if(CHOICE==3)
   {
    twoxthree(AI,table);
    draw();
   }
  }
  else
  {
   onexthree(AI,table);
   win();
  }
 }
}
}
void fourth_iteration(char* table,int CHOICE)
{
  if(CHOICE==0)//top as top
  {
    twoxtwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1) //first branch
    {
     onexthree(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==6)
     {
      twoxone(AI,table);
      CHOICE=get_input(table);
      if(CHOICE==5)
      {
       threextwo(AI,table);
       draw();
      }
      else
      {
       twoxthree(AI,table);
       win();
      }
     }
     else
     {
      threexone(AI,table);
      win();
     }
    }
   if(CHOICE==2)
   {
    onextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==7)
    {
     twoxone(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==5)
     {
      threexone(AI,table);
      draw();
     }
     else
     {
      twoxthree(AI,table);
      win();
     }
    }
    else
    {
     threextwo(AI,table);
     win();
    }
   }
   if(CHOICE==3)
   {
    threexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==2)
    {
     onextwo(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==7)
     {
      twoxthree(AI,table);
      draw();
     }
     else
     {
      threextwo(AI,table);
      win();
     }
    }
    else
    {
     onexthree(AI,table);
     win();
    }
   }
   if(CHOICE==5)
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==6)
    {
     twoxone(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==1||CHOICE==8)
     {
      threextwo(AI,table);
      draw();
     }
     if(CHOICE==7)
     {
      threexthree(AI,table);
      draw();
     }
    }
   else
   {
    threexone(AI,table);
    win();
    }
   }
  if(CHOICE==6)
  {
   twoxone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==5)
   {
    onextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==7)
    {
     threexthree(AI,table);
     draw();
    }
    else
    {
     threextwo(AI,table);
     win();
    }
   }
   else
   {
    twoxthree(AI,table);
    win();
   }
  }
  if(CHOICE==7)
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    onextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==5)
    {
     threexthree(AI,table);
     draw();
     }
    if(CHOICE==3||CHOICE==8)
    {
      twoxthree(AI,table);
      draw();
    }
   }
   else
   {
    onexthree(AI,table);
    win();
    }
   }
  if(CHOICE==8)
  {
   twoxone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==5)
   {
    onexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==6)
    {
     threextwo(AI,table);
     draw();
    }
    else
    {
     threexone(AI,table);
     win();
    }
   }
   else
   {
    twoxthree(AI,table);
    win();
   }
  }
 }
 if(CHOICE==2)//left as top
 {
   twoxtwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==5)//first branch
   {
    threexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==0)
    {
     onextwo(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==7)
     {
      twoxone(AI,table);
      draw();
     }
     else
     {
      threextwo(AI,table);
      win();
     }
    }
    else
    {
     onexone(AI,table);
     win();
    }
   }
   if(CHOICE==8)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     onextwo(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==7)
     {
      threexone(AI,table);
      draw();
     }
    else
     {
      threextwo(AI,table);
      win();
     }
    }
   else
   {
    twoxone(AI,table);
    win();
    }
   }
  if(CHOICE==1)
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     threexone(AI,table);
     draw();
    }
    else
    {
     twoxone(AI,table);
     win();
    }
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  if(CHOICE==7)
  {
   threexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    onextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==5)
    {
     twoxone(AI,table);
     draw();
    }
    if(CHOICE==6)
    {
     twoxone(AI,table);
     draw();
     }
    if(CHOICE==3)
    {
     threexone(AI,table);
     draw();
    }
   }
   else
   {
    onexone(AI,table);
    win();
   }
  }
  if(CHOICE==0)
  {
   onextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==7)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     threexone(AI,table);
     draw();
    }
    else
    {
     twoxone(AI,table);
     win();
    }
   }
   else
   {
    threextwo(AI,table);
    win();
   }
  }
  if(CHOICE==3)
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==7)
    {
     threexone(AI,table);
     draw();
     }
    if(CHOICE==1||CHOICE==6)
    {
     threextwo(AI,table);
     draw();
    }
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  if(CHOICE==6)
  {
   onextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==7)
   {
    threexthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==0)
    {
     twoxone(AI,table);
     draw();
    }
    else
    {
     onexone(AI,table);
     win();
    }
   }
   else
   {
    threextwo(AI,table);
    win();
   }
  }
 }
 if(CHOICE==6)//right as top
 {
  twoxtwo(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==3)
   {
    onexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==8)
    {
     threextwo(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==1)
     {
      twoxthree(AI,table);
      draw();
     }
     else
     {
     onextwo(AI,table);
     win();
     }
    }
    else
    {
     threexthree(AI,table);
     win();
    }
   }
   if(CHOICE==0)
   {
    twoxone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==5)
    {
     threextwo(AI,table);
     CHOICE=get_input(table);
     if(CHOICE==1)
     {
      onexthree(AI,table);
      draw();
     }
     else
     {
      onextwo(AI,table);
      win();
     }
    }
    else
    {
     twoxthree(AI,table);
     win();
    }
   }
  if(CHOICE==7)
  {
   threexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    twoxone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==5)
    {
     onextwo(AI,table);
     draw();
    }
    else
    {
     onextwo(AI,table);
     win();
    }
   }
   else
   {
    twoxthree(AI,table);
    win();
   }
  }
  if(CHOICE==1)
  {
   onexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==8)
   {
    threextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3||CHOICE==2)
    {
     twoxthree(AI,table);
     draw();
    }
    if(CHOICE==5)
    {
     onexthree(AI,table);
     draw();
    }
   }
   else
   {
    threexthree(AI,table);
    win();
   }
  }
  if(CHOICE==8)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    twoxone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==5)
    {
     onexthree(AI,table);
     draw();
    }
    else
    {
     twoxthree(AI,table);
     win();
    }
   }
   else
   {
    onextwo(AI,table);
    win();
   }
  }
  if(CHOICE==5)
  {
   threexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==0)
   {
    twoxone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==1)
    {
     onexthree(AI,table);
     draw();
    }
    if(CHOICE==2||CHOICE==7)
    {
     onextwo(AI,table);
     draw();
    }
   }
   else
   {
    onexone(AI,table);
    win();
    }
   }
  if(CHOICE==2)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    onexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==8)
    {
     twoxthree(AI,table);
     draw();
    }
    else
    {
     threexthree(AI,table);
     win();
    }
   }
   else
   {
    onextwo(AI,table);
    win();
   }
  }
 }
 if(CHOICE==8) //bottom as top
 {
  twoxtwo(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==7)
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     onextwo(AI,table);
     draw();
    }
    else
    {
     twoxone(AI,table);
     win();
    }
   }
   else
   {
    onexthree(AI,table);
    win();
    }
   }
 if(CHOICE==6)
 {
  threextwo(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==1)
  {
   twoxthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==3)
   {
    onexthree(AI,table);
    draw();
    }
   else
   {
    twoxone(AI,table);
    win();
   }
  }
  else
  {
   onextwo(AI,table);
   win();
  }
 }
 if(CHOICE==5)
 {
  onexthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==6)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    onexone(AI,table);
    draw();
    }
   else
    {
     onextwo(AI,table);
     win();
    }
   }
   else
   {
    threexone(AI,table);
    win();
    }
   }
  if(CHOICE==3)
  {
   threexone(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==2)
   {
    twoxthree(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==7||CHOICE==0)
    {
     onextwo(AI,table);
     draw();
    }
    if(CHOICE==1)
    {
     onexone(AI,table);
     draw();
    }
   }
   else
   {
    onexthree(AI,table);
    win();
   }
  }
 if(CHOICE==2)
 {
  twoxthree(AI,table);
  CHOICE=get_input(table);
  if(CHOICE==3)
  {
   threextwo(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==1)
   {
    onexone(AI,table);
    draw();
   }
   else
   {
    onextwo(AI,table);
    win();
    }
   }
  else
  {
   twoxone(AI,table);
   }
  }
  if(CHOICE==1)
  {
   onexthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==6)
   {
    threextwo(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==3)
    {
     onexone(AI,table);
     draw();
    }
    if(CHOICE==5||CHOICE==0)
    {
     twoxone(AI,table);
     draw();
     }
    }
    else
    {
     threexone(AI,table);
     win();
    }
   }
  if(CHOICE==0)
  {
   twoxthree(AI,table);
   CHOICE=get_input(table);
   if(CHOICE==3)
   {
    threexone(AI,table);
    CHOICE=get_input(table);
    if(CHOICE==2)
    {
     onextwo(AI,table);
     draw();
     }
    else
    {
     onexthree(AI,table);
     win();
    }
   }
   else
   {
    twoxone(AI,table);
    win();
    }
   }
  }
}
 void main()
 {
   int n;
   int AI_CHOICE;
   int TURN,i,CHOICE;
   char *TABLE;
   srand(time(NULL));
   for(i=0;i<9;i++)
   *(TABLE+i)='#';
   clrscr();

   printf("\n**INPUT:TOP LEFT STARTS WITH 0 AND MOVES TILL 8**\n EXAMPLE:\n");
   EXAMPLE_INPUT();
   printf("\nWIN ME MY CREATOR WILL GIVE YOU $10,000");
   printf("\nYou want to go first or should I ? As if it is going to matter");
   printf("\nChoose 1. I will go first 2.You go first\n");
   scanf("\n%d",&TURN);
   if(TURN==1)    //first move by human
   {

     CHOICE=get_input1(TABLE);
     if(CHOICE==4)
     {
      second_iteration(TABLE);
      }
    else
     if(CHOICE==1||CHOICE==3||CHOICE==5||CHOICE==7)
     {
      third_iteration(TABLE,CHOICE);
      }
     else if(CHOICE==0||CHOICE==2||CHOICE==6||CHOICE==8)
     {
      fourth_iteration(TABLE,CHOICE);
      }
   }
   else          //first move by AI
   {
     TABLE=AI_start(TABLE);
     FIRST_ITERATION(TABLE);
     }
   printf("YOU CAN'T EVEN PLAY RIGHT...YOU THINK YOU CAN WIN ME");
   getch();
 }
